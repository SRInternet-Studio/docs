import{_ as e,c as a,o as i,ae as t}from"./chunks/framework.58IBamlh.js";const g=JSON.parse('{"title":"创建新的插件","description":"","frontmatter":{},"headers":[],"relativePath":"Create-a-New-Plugin.md","filePath":"Create-a-New-Plugin.md"}'),n={name:"Create-a-New-Plugin.md"};function o(l,s,p,r,d,h){return i(),a("div",null,s[0]||(s[0]=[t(`<h1 id="创建新的插件" tabindex="-1">创建新的插件 <a class="header-anchor" href="#创建新的插件" aria-label="Permalink to &quot;创建新的插件&quot;">​</a></h1><p>为了简儿原生功能的丰富性，提升开发者二次开发的便捷性，简儿于 2025.02 推出了全新的 <strong>NEXT PREVIEW 分支</strong>。此分支的原生功能实际是 2.0 版本的迭代，但是本分支新增了插件兼容性，为广大开发者们提供了更友好的插件开发入口。本文将引导你如何快速、顺利地开发 <strong>简儿（NEXT PREVIEW 分支）</strong> 的插件并投入使用。</p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>NEXT PREVIEW 分支是<strong>预览分支</strong>，插件兼容性有待评估，投入实际使用可能不会具有预期中的稳定性。请谨慎使用本分支产品，如有遇到Bug，请立即反馈于 Issue ，感谢您的谅解与支持。</p></div><h2 id="_0-原理讲解-必看" tabindex="-1"><strong>0. 原理讲解（必看）</strong> <a class="header-anchor" href="#_0-原理讲解-必看" aria-label="Permalink to &quot;**0. 原理讲解（必看）**&quot;">​</a></h2><p>你可以在简儿的根目录一下找到 <code>plugins</code> 文件夹，这是插件的存放目录。</p><p>插件可以以以下形式在 <code>plugins</code> 文件夹中存在：</p><ul><li><code>.py</code> 文件</li><li><code>.pyw</code> 文件</li><li>文件夹</li></ul><p>其中 <code>.py</code> 文件和 <code>.pyw</code> 文件是以单个文件形式存在的单个插件，可以直接放在 <code>plugins</code> 文件夹根目录下。文件夹形式存在的插件是由多个文件组合形成的<strong>单个插件</strong>，文件夹中必须包含<strong>入口文件</strong> <code>setup.py</code> ，文件夹直接放在 <code>plugins</code> 文件夹根目录下。<strong>文件夹形式存在的插件，其内部的子文件夹不会被识别为插件</strong>。</p><p><code>setup.py</code> 和其他以单个文件形式存在的单个插件具有与相同的内容规范，将会在后文 <em><strong>1. 开始制作</strong></em> 中详细讲解。</p><p>无论任何形式的插件，当其文件名以 <strong>d_</strong> 开头时，如 <code>d_something.py</code> ，将会被忽略加载，即为 <strong>已禁用插件</strong> 。你可以很方便地在群里发送 “<u>启用插件</u>” 或 “<u>禁用插件</u>” 来使简儿加载或忽略加载某些插件。你可以发送 “<u>重载插件</u>” 来使简儿重新从磁盘中加载全部插件，而无需重启简儿。你还可以发送 “<u>插件视角</u>” 来查看插件的运行报告，哪些插件是否已被启用，或因为何种原因加载失败。</p><h2 id="_1-开始制作" tabindex="-1"><strong>1. 开始制作</strong> <a class="header-anchor" href="#_1-开始制作" aria-label="Permalink to &quot;**1. 开始制作**&quot;">​</a></h2><h3 id="创建单个文件形式存在的插件" tabindex="-1">创建单个文件形式存在的插件 <a class="header-anchor" href="#创建单个文件形式存在的插件" aria-label="Permalink to &quot;创建单个文件形式存在的插件&quot;">​</a></h3><p>在 <code>plugins</code> 文件夹 下，新建 <code>.py</code> 文件，文件名会作为插件名称。如 <code>Hello World.py</code></p><h3 id="创建文件夹形式存在的插件" tabindex="-1">创建文件夹形式存在的插件 <a class="header-anchor" href="#创建文件夹形式存在的插件" aria-label="Permalink to &quot;创建文件夹形式存在的插件&quot;">​</a></h3><p>在 <code>plugins</code> 文件夹 下，新建文件夹，文件夹名称会作为插件名称。如 <code>Hello World</code></p><p>在该文件夹下，新建 <code>setup.py</code> 文件，该文件会作为插件的入口文件，响应插件的一系列事件。如果缺少该文件，则插件将会无法被正常加载。</p><p>接下来， <code>setup.py</code> 文件和单个文件形式存在的插件操作方法<strong>完全相同</strong>，开发者只需要按照接下来的步骤即可完成插件注册和插件编写。</p><h3 id="注册插件" tabindex="-1">注册插件 <a class="header-anchor" href="#注册插件" aria-label="Permalink to &quot;注册插件&quot;">​</a></h3><p>这是一个示例：一个 <code>Hello World.py</code> 插件具有以下代码</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TRIGGHT_KEYWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;你好，世界&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HELP_MESSAGE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;仅仅就是一句 Hello world 🤔？&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> on_message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, actions, Manager, Segments):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actions.send(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">group_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.group_id, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Manager.Message(Segments.Text(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world! 🌍&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span></code></pre></div><p>仅需5行代码即可完成开发一个可以发送消息的插件，可见简儿插件开发的高效性。接下来，本文将对代码进行讲解。</p><ul><li><code>TRIGGHT_KEYWORD</code> ：<code>str</code> 类型，插件的触发关键词，即当用户在群里发送的消息包含此关键词时，触发此插件。 在示例 <code>Hello World.py</code> 插件中，当用户发送 “<u>你好，世界</u>” 时，此插件将会被触发。（如图所示）</li></ul><p><img src="https://github.com/user-attachments/assets/900f890a-b33b-4f65-ac1a-e5bfbe67aec1" alt="image"></p><ul><li><code>HELP_MESSAGE</code> ：<code>str</code> 类型，插件的帮助消息。当用户在群里@简儿 或者发送 “<u>帮助</u>” 时，展示的帮助文件中会包括此帮助消息文本。（如图所示）</li></ul><p><img src="https://github.com/user-attachments/assets/5dea55e5-dd57-4da1-ab1a-cb47c909318f" alt="QQ_1739525797968"></p><ul><li><p><code>async def on_message()</code> ：插件的入口函数，当插件被触发时，执行 <code>on_message()</code> 函数内部的代码。<strong>注意，此方法必须异步</strong>。</p></li><li><p><code>return True</code> ：阻断执行后续功能，此行可选。当插件返回 <code>True</code> 时，简儿将停止执行后续的功能，<u>防止多个具有相同触发关键词的功能一起被执行</u>。</p></li></ul><p>恭喜你，已经成功地<strong>新建并注册好了一个插件</strong>，现在这个插件可以被正常地加载和调用啦！下一步，本文将深入讲解如何实现更多丰富功能。</p><h3 id="参数传入" tabindex="-1">参数传入 <a class="header-anchor" href="#参数传入" aria-label="Permalink to &quot;参数传入&quot;">​</a></h3><p><code>async def on_message()</code> 函数可以接受很多参数，各种各样的参数说明详见 <a href="https://github.com/SRInternet-Studio/Jianer_QQ_bot/blob/NEXT-PREVIEW/Variables.md" target="_blank" rel="noreferrer"><em>Variables.md</em></a></p><p>直接将想要被传入的参数填写在函数的括号内即可，例如 <code>async def on_message(event, actions, Manager, Segments)</code></p><h3 id="实现功能" tabindex="-1">实现功能 <a class="header-anchor" href="#实现功能" aria-label="Permalink to &quot;实现功能&quot;">​</a></h3><p><code>&#39;actions&#39;</code>：行动，用于操作机器人执行一系列操作。</p><p><code>&#39;event&#39;</code>：当前已被触发的消息事件类型及事件内容。</p><p>举例：发送消息</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actions.send(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">group_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.group_id, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Manager.Message(Segments.Text(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world! 🌍&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span></code></pre></div><ul><li><p><code>actions.send()</code> ：发送一条内容</p></li><li><p><code>event.group_id</code> ：获取发送消息的用户所在的群号码</p></li><li><p><code>Manager.Message</code> ：一个消息内容</p></li><li><p><code>Segments.Text</code> ：一段纯文本消息</p></li></ul><p><code>&#39;actions&#39;</code> 和 <code>&#39;event&#39;</code> 还可以实现许许多多的功能，它继承于 <strong>OneBot v11</strong> 框架，你可以在<a href="https://github.com/botuniverse/onebot-11/blob/master/api/public.md" target="_blank" rel="noreferrer">这里</a>找到 <code>&#39;actions&#39;</code> 的更多有趣用法，可以在<a href="https://github.com/botuniverse/onebot-11/blob/master/event/README.md" target="_blank" rel="noreferrer">这里</a>找到 <code>&#39;event&#39;</code> 的更多详细信息。</p><p>恭喜你，你已经实现了自己的第一个插件！快去试试吧～</p><h2 id="_2-拓展知识" tabindex="-1">2. 拓展知识 <a class="header-anchor" href="#_2-拓展知识" aria-label="Permalink to &quot;2. 拓展知识&quot;">​</a></h2><h3 id="永久触发插件" tabindex="-1">永久触发插件 <a class="header-anchor" href="#永久触发插件" aria-label="Permalink to &quot;永久触发插件&quot;">​</a></h3><p><strong>永久触发插件</strong> 是指无论用户发任何消息，该插件都会收到事件并被触发。</p><p>如果你想要做一个 <strong>永久触发插件</strong> ，仅需将改动一个值</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TRIGGHT_KEYWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Any&quot;</span></span></code></pre></div><p>可以看到，将 <strong>TRIGGHT_KEYWORD</strong> 设置为了 <code>Any</code> ，<strong>每一次</strong>只要用户发送了新消息，插件都会被立刻执行。</p><p><strong>请注意，这样的插件不会显示在帮助消息中。</strong></p>`,45)]))}const k=e(n,[["render",o]]);export{g as __pageData,k as default};
